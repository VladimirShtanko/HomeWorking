from django.contrib.auth.models import User
User.objects.create_user('user1', 'user1@example.com', 'password123')
User.objects.create_user('user2', 'user2@example.com', 'password123')

# Создание двух объектов модели Author, связанных с пользователями
from news_portal.models import Author # Укажите правильный путь к вашей модели Author
author1 = Author.objects.create(user=User.objects.get(username='user1'))
author2 = Author.objects.create(user=User.objects.get(username='user2'))

# Добавление 4 категорий в модель Category
from news_portal.models import Category # Укажите правильный путь к вашей модели Category
Category.objects.create(name='Спорт')
Category.objects.create(name='Политика')
Category.objects.create(name='Образование')
Category.objects.create(name='Технологии')

# Добавление 2 статей и 1 новости
from news_portal.models import Post, Author, Category, PostCategory # Укажите правильный путь к моделям
post1 = Post.objects.create(author=author1, post_type='article', title='Первая статья', text='Текст первой статьи...')
post2 = Post.objects.create(author=author2, post_type='article', title='Вторая статья', text='Текст второй статьи...')
post3 = Post.objects.create(author=author1, post_type='news', title='Интересная новость', text='Текст новости...')

# Присвоение им категорий
# Для post1: одна категория
PostCategory.objects.create(post=post1, category=Category.objects.get(name='Спорт'))

# Для post2: две категории
PostCategory.objects.create(post=post2, category=Category.objects.get(name='Политика'))
PostCategory.objects.create(post=post2, category=Category.objects.get(name='Образование'))

# Для post3: одна категория
PostCategory.objects.create(post=post3, category=Category.objects.get(name='Технологии'))

# Создание как минимум 4 комментариев к разным объектам модели Post
from news_portal.models import Comment, User, Post # Укажите правильный путь к моделям
Comment.objects.create(post=post1, user=User.objects.get(username='user2'), text='Отличная статья!')
Comment.objects.create(post=post1, user=User.objects.get(username='user1'), text='Согласен с автором.')
Comment.objects.create(post=post2, user=User.objects.get(username='user1'), text='Интересная точка зрения.')
Comment.objects.create(post=post3, user=User.objects.get(username='user2'), text='Очень полезная информация.')

# Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
post1.like()
post1.like()
post1.dislike()

post2.like()

post3.like()
post3.like()
post3.like()
post3.dislike()

comment1 = Comment.objects.get(pk=1) # Предполагается, что это первый комментарий
comment1.like()

comment2 = Comment.objects.get(pk=2)
comment2.like()
comment2.like()

comment3 = Comment.objects.get(pk=3)
comment3.dislike()

comment4 = Comment.objects.get(pk=4)
comment4.like()

# Обновить рейтинги пользователей
author1.update_rating()
author2.update_rating()

# Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
best_user = User.objects.all().order_by('-author__rating').first()
print(f"Лучший пользователь: {best_user.username}, Рейтинг: {best_user.author.rating}")

# Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
best_post = Post.objects.order_by('-rating').first()
print(f"Дата добавления: {best_post.created_at}")
print(f"Автор: {best_post.author.user.username}")
print(f"Рейтинг: {best_post.rating}")
print(f"Заголовок: {best_post.title}")
print(f"Превью: {best_post.preview()}")

# Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
print("\nКомментарии к лучшей статье:")
for comment in best_post.comment_set.all():
    print(f"Дата: {comment.created_at}, Пользователь: {comment.user.username}, Рейтинг: {comment.rating}, Текст: {comment.text}")